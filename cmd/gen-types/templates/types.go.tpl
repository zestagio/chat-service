// Code generated by cmd/gen-types; DO NOT EDIT.
package {{ .pkg }}

import (
	"database/sql/driver"
	"fmt"
	"github.com/google/uuid"
)
{{range .types}}
type {{ . }} uuid.UUID

var {{ . }}Nil {{ . }}

func New{{ . }}() {{ . }} {
	return {{ . }}(uuid.New())
}

func (id {{ . }}) String() string {
	return (uuid.UUID)(id).String()
}

func (id *{{ . }}) Scan(src interface{}) error {
	return (*uuid.UUID)(id).Scan(src)
}

func (id {{ . }}) Value() (driver.Value, error) {
	return (uuid.UUID)(id).Value()
}

func (id {{ . }}) MarshalText() ([]byte, error) {
	return (uuid.UUID)(id).MarshalText()
}

func (id *{{ . }}) UnmarshalText(data []byte) error {
	return (*uuid.UUID)(id).UnmarshalText(data)
}

func (id {{ . }}) IsZero() bool {
	return id.String() == uuid.Nil.String()
}

func (id {{ . }}) Matches(x interface{}) bool {
	switch x := x.(type) {
	case {{ . }}:
		return id.String() == x.String()
	}
	return false
}

func (id {{ . }}) Validate() error {
	if id.IsZero() {
		return fmt.Errorf("id has invalid value: %v", id.String())
	}
	return nil
}
{{end}}
func Parse[T {{ .argType }}](s string) (T, error) {
	id, err := uuid.Parse(s)

	return T(id), err
}

func MustParse[T {{ .argType }}](s string) T {
	return T(uuid.MustParse(s))
}
