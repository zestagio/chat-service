// Code generated by options-gen. DO NOT EDIT.
package server

import (
	fmt461e464ebed9 "fmt"

	errors461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/errors"
	validator461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/validator"
	"github.com/labstack/echo/v4"
	"github.com/zestagio/chat-service/internal/middlewares"
	"go.uber.org/zap"
)

type OptOptionsSetter func(o *Options)

func NewOptions(
	logger *zap.Logger,
	addr string,
	allowOrigins []string,
	introspector middlewares.Introspector,
	requiredResource string,
	requiredRole string,
	handlersRegistrar func(e *echo.Echo),
	wsHandler wsHTTPHandler,
	options ...OptOptionsSetter,
) Options {
	o := Options{}

	// Setting defaults from field tag (if present)

	o.logger = logger

	o.addr = addr

	o.allowOrigins = allowOrigins

	o.introspector = introspector

	o.requiredResource = requiredResource

	o.requiredRole = requiredRole

	o.handlersRegistrar = handlersRegistrar

	o.wsHandler = wsHandler

	for _, opt := range options {
		opt(&o)
	}
	return o
}

func (o *Options) Validate() error {
	errs := new(errors461e464ebed9.ValidationErrors)
	errs.Add(errors461e464ebed9.NewValidationError("logger", _validate_Options_logger(o)))
	errs.Add(errors461e464ebed9.NewValidationError("addr", _validate_Options_addr(o)))
	errs.Add(errors461e464ebed9.NewValidationError("allowOrigins", _validate_Options_allowOrigins(o)))
	errs.Add(errors461e464ebed9.NewValidationError("introspector", _validate_Options_introspector(o)))
	errs.Add(errors461e464ebed9.NewValidationError("requiredResource", _validate_Options_requiredResource(o)))
	errs.Add(errors461e464ebed9.NewValidationError("requiredRole", _validate_Options_requiredRole(o)))
	errs.Add(errors461e464ebed9.NewValidationError("handlersRegistrar", _validate_Options_handlersRegistrar(o)))
	errs.Add(errors461e464ebed9.NewValidationError("wsHandler", _validate_Options_wsHandler(o)))
	return errs.AsError()
}

func _validate_Options_logger(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.logger, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `logger` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_addr(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.addr, "required,hostname_port"); err != nil {
		return fmt461e464ebed9.Errorf("field `addr` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_allowOrigins(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.allowOrigins, "min=1"); err != nil {
		return fmt461e464ebed9.Errorf("field `allowOrigins` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_introspector(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.introspector, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `introspector` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_requiredResource(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.requiredResource, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `requiredResource` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_requiredRole(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.requiredRole, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `requiredRole` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_handlersRegistrar(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.handlersRegistrar, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `handlersRegistrar` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_wsHandler(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.wsHandler, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `wsHandler` did not pass the test: %w", err)
	}
	return nil
}
