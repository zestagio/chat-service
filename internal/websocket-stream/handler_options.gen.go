// Code generated by options-gen. DO NOT EDIT.
package websocketstream

import (
	fmt461e464ebed9 "fmt"
	"time"

	errors461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/errors"
	validator461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/validator"
	"go.uber.org/zap"
)

type OptOptionsSetter func(o *Options)

func NewOptions(
	logger *zap.Logger,
	eventStream eventStream,
	eventAdapter EventAdapter,
	eventWriter EventWriter,
	upgrader Upgrader,
	shutdownCh <-chan struct{},
	options ...OptOptionsSetter,
) Options {
	o := Options{}

	// Setting defaults from field tag (if present)
	o.pingPeriod, _ = time.ParseDuration("3s")

	o.logger = logger

	o.eventStream = eventStream

	o.eventAdapter = eventAdapter

	o.eventWriter = eventWriter

	o.upgrader = upgrader

	o.shutdownCh = shutdownCh

	for _, opt := range options {
		opt(&o)
	}
	return o
}

func WithPingPeriod(opt time.Duration) OptOptionsSetter {
	return func(o *Options) {
		o.pingPeriod = opt

	}
}

func (o *Options) Validate() error {
	errs := new(errors461e464ebed9.ValidationErrors)
	errs.Add(errors461e464ebed9.NewValidationError("pingPeriod", _validate_Options_pingPeriod(o)))
	errs.Add(errors461e464ebed9.NewValidationError("logger", _validate_Options_logger(o)))
	errs.Add(errors461e464ebed9.NewValidationError("eventStream", _validate_Options_eventStream(o)))
	errs.Add(errors461e464ebed9.NewValidationError("eventAdapter", _validate_Options_eventAdapter(o)))
	errs.Add(errors461e464ebed9.NewValidationError("eventWriter", _validate_Options_eventWriter(o)))
	errs.Add(errors461e464ebed9.NewValidationError("upgrader", _validate_Options_upgrader(o)))
	errs.Add(errors461e464ebed9.NewValidationError("shutdownCh", _validate_Options_shutdownCh(o)))
	return errs.AsError()
}

func _validate_Options_pingPeriod(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.pingPeriod, "omitempty,min=100ms,max=30s"); err != nil {
		return fmt461e464ebed9.Errorf("field `pingPeriod` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_logger(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.logger, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `logger` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_eventStream(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.eventStream, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `eventStream` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_eventAdapter(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.eventAdapter, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `eventAdapter` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_eventWriter(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.eventWriter, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `eventWriter` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_upgrader(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.upgrader, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `upgrader` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_shutdownCh(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.shutdownCh, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `shutdownCh` did not pass the test: %w", err)
	}
	return nil
}
