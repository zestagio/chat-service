// Code generated by ent, DO NOT EDIT.

package store

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/zestagio/chat-service/internal/store/failedjob"
	"github.com/zestagio/chat-service/internal/store/predicate"
	"github.com/zestagio/chat-service/internal/types"
)

// FailedJobQuery is the builder for querying FailedJob entities.
type FailedJobQuery struct {
	config
	ctx        *QueryContext
	order      []failedjob.OrderOption
	inters     []Interceptor
	predicates []predicate.FailedJob
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FailedJobQuery builder.
func (fjq *FailedJobQuery) Where(ps ...predicate.FailedJob) *FailedJobQuery {
	fjq.predicates = append(fjq.predicates, ps...)
	return fjq
}

// Limit the number of records to be returned by this query.
func (fjq *FailedJobQuery) Limit(limit int) *FailedJobQuery {
	fjq.ctx.Limit = &limit
	return fjq
}

// Offset to start from.
func (fjq *FailedJobQuery) Offset(offset int) *FailedJobQuery {
	fjq.ctx.Offset = &offset
	return fjq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fjq *FailedJobQuery) Unique(unique bool) *FailedJobQuery {
	fjq.ctx.Unique = &unique
	return fjq
}

// Order specifies how the records should be ordered.
func (fjq *FailedJobQuery) Order(o ...failedjob.OrderOption) *FailedJobQuery {
	fjq.order = append(fjq.order, o...)
	return fjq
}

// First returns the first FailedJob entity from the query.
// Returns a *NotFoundError when no FailedJob was found.
func (fjq *FailedJobQuery) First(ctx context.Context) (*FailedJob, error) {
	nodes, err := fjq.Limit(1).All(setContextOp(ctx, fjq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{failedjob.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fjq *FailedJobQuery) FirstX(ctx context.Context) *FailedJob {
	node, err := fjq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FailedJob ID from the query.
// Returns a *NotFoundError when no FailedJob ID was found.
func (fjq *FailedJobQuery) FirstID(ctx context.Context) (id types.FailedJobID, err error) {
	var ids []types.FailedJobID
	if ids, err = fjq.Limit(1).IDs(setContextOp(ctx, fjq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{failedjob.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fjq *FailedJobQuery) FirstIDX(ctx context.Context) types.FailedJobID {
	id, err := fjq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FailedJob entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FailedJob entity is found.
// Returns a *NotFoundError when no FailedJob entities are found.
func (fjq *FailedJobQuery) Only(ctx context.Context) (*FailedJob, error) {
	nodes, err := fjq.Limit(2).All(setContextOp(ctx, fjq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{failedjob.Label}
	default:
		return nil, &NotSingularError{failedjob.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fjq *FailedJobQuery) OnlyX(ctx context.Context) *FailedJob {
	node, err := fjq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FailedJob ID in the query.
// Returns a *NotSingularError when more than one FailedJob ID is found.
// Returns a *NotFoundError when no entities are found.
func (fjq *FailedJobQuery) OnlyID(ctx context.Context) (id types.FailedJobID, err error) {
	var ids []types.FailedJobID
	if ids, err = fjq.Limit(2).IDs(setContextOp(ctx, fjq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{failedjob.Label}
	default:
		err = &NotSingularError{failedjob.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fjq *FailedJobQuery) OnlyIDX(ctx context.Context) types.FailedJobID {
	id, err := fjq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FailedJobs.
func (fjq *FailedJobQuery) All(ctx context.Context) ([]*FailedJob, error) {
	ctx = setContextOp(ctx, fjq.ctx, "All")
	if err := fjq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*FailedJob, *FailedJobQuery]()
	return withInterceptors[[]*FailedJob](ctx, fjq, qr, fjq.inters)
}

// AllX is like All, but panics if an error occurs.
func (fjq *FailedJobQuery) AllX(ctx context.Context) []*FailedJob {
	nodes, err := fjq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FailedJob IDs.
func (fjq *FailedJobQuery) IDs(ctx context.Context) (ids []types.FailedJobID, err error) {
	if fjq.ctx.Unique == nil && fjq.path != nil {
		fjq.Unique(true)
	}
	ctx = setContextOp(ctx, fjq.ctx, "IDs")
	if err = fjq.Select(failedjob.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fjq *FailedJobQuery) IDsX(ctx context.Context) []types.FailedJobID {
	ids, err := fjq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fjq *FailedJobQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, fjq.ctx, "Count")
	if err := fjq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, fjq, querierCount[*FailedJobQuery](), fjq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (fjq *FailedJobQuery) CountX(ctx context.Context) int {
	count, err := fjq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fjq *FailedJobQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, fjq.ctx, "Exist")
	switch _, err := fjq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("store: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (fjq *FailedJobQuery) ExistX(ctx context.Context) bool {
	exist, err := fjq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FailedJobQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fjq *FailedJobQuery) Clone() *FailedJobQuery {
	if fjq == nil {
		return nil
	}
	return &FailedJobQuery{
		config:     fjq.config,
		ctx:        fjq.ctx.Clone(),
		order:      append([]failedjob.OrderOption{}, fjq.order...),
		inters:     append([]Interceptor{}, fjq.inters...),
		predicates: append([]predicate.FailedJob{}, fjq.predicates...),
		// clone intermediate query.
		sql:  fjq.sql.Clone(),
		path: fjq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FailedJob.Query().
//		GroupBy(failedjob.FieldName).
//		Aggregate(store.Count()).
//		Scan(ctx, &v)
func (fjq *FailedJobQuery) GroupBy(field string, fields ...string) *FailedJobGroupBy {
	fjq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FailedJobGroupBy{build: fjq}
	grbuild.flds = &fjq.ctx.Fields
	grbuild.label = failedjob.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.FailedJob.Query().
//		Select(failedjob.FieldName).
//		Scan(ctx, &v)
func (fjq *FailedJobQuery) Select(fields ...string) *FailedJobSelect {
	fjq.ctx.Fields = append(fjq.ctx.Fields, fields...)
	sbuild := &FailedJobSelect{FailedJobQuery: fjq}
	sbuild.label = failedjob.Label
	sbuild.flds, sbuild.scan = &fjq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FailedJobSelect configured with the given aggregations.
func (fjq *FailedJobQuery) Aggregate(fns ...AggregateFunc) *FailedJobSelect {
	return fjq.Select().Aggregate(fns...)
}

func (fjq *FailedJobQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range fjq.inters {
		if inter == nil {
			return fmt.Errorf("store: uninitialized interceptor (forgotten import store/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, fjq); err != nil {
				return err
			}
		}
	}
	for _, f := range fjq.ctx.Fields {
		if !failedjob.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("store: invalid field %q for query", f)}
		}
	}
	if fjq.path != nil {
		prev, err := fjq.path(ctx)
		if err != nil {
			return err
		}
		fjq.sql = prev
	}
	return nil
}

func (fjq *FailedJobQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FailedJob, error) {
	var (
		nodes = []*FailedJob{}
		_spec = fjq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*FailedJob).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &FailedJob{config: fjq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(fjq.modifiers) > 0 {
		_spec.Modifiers = fjq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fjq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (fjq *FailedJobQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fjq.querySpec()
	if len(fjq.modifiers) > 0 {
		_spec.Modifiers = fjq.modifiers
	}
	_spec.Node.Columns = fjq.ctx.Fields
	if len(fjq.ctx.Fields) > 0 {
		_spec.Unique = fjq.ctx.Unique != nil && *fjq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, fjq.driver, _spec)
}

func (fjq *FailedJobQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(failedjob.Table, failedjob.Columns, sqlgraph.NewFieldSpec(failedjob.FieldID, field.TypeUUID))
	_spec.From = fjq.sql
	if unique := fjq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if fjq.path != nil {
		_spec.Unique = true
	}
	if fields := fjq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, failedjob.FieldID)
		for i := range fields {
			if fields[i] != failedjob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := fjq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fjq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fjq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fjq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fjq *FailedJobQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fjq.driver.Dialect())
	t1 := builder.Table(failedjob.Table)
	columns := fjq.ctx.Fields
	if len(columns) == 0 {
		columns = failedjob.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fjq.sql != nil {
		selector = fjq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fjq.ctx.Unique != nil && *fjq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range fjq.modifiers {
		m(selector)
	}
	for _, p := range fjq.predicates {
		p(selector)
	}
	for _, p := range fjq.order {
		p(selector)
	}
	if offset := fjq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fjq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (fjq *FailedJobQuery) ForUpdate(opts ...sql.LockOption) *FailedJobQuery {
	if fjq.driver.Dialect() == dialect.Postgres {
		fjq.Unique(false)
	}
	fjq.modifiers = append(fjq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return fjq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (fjq *FailedJobQuery) ForShare(opts ...sql.LockOption) *FailedJobQuery {
	if fjq.driver.Dialect() == dialect.Postgres {
		fjq.Unique(false)
	}
	fjq.modifiers = append(fjq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return fjq
}

// FailedJobGroupBy is the group-by builder for FailedJob entities.
type FailedJobGroupBy struct {
	selector
	build *FailedJobQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fjgb *FailedJobGroupBy) Aggregate(fns ...AggregateFunc) *FailedJobGroupBy {
	fjgb.fns = append(fjgb.fns, fns...)
	return fjgb
}

// Scan applies the selector query and scans the result into the given value.
func (fjgb *FailedJobGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fjgb.build.ctx, "GroupBy")
	if err := fjgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FailedJobQuery, *FailedJobGroupBy](ctx, fjgb.build, fjgb, fjgb.build.inters, v)
}

func (fjgb *FailedJobGroupBy) sqlScan(ctx context.Context, root *FailedJobQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(fjgb.fns))
	for _, fn := range fjgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*fjgb.flds)+len(fjgb.fns))
		for _, f := range *fjgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*fjgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fjgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FailedJobSelect is the builder for selecting fields of FailedJob entities.
type FailedJobSelect struct {
	*FailedJobQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fjs *FailedJobSelect) Aggregate(fns ...AggregateFunc) *FailedJobSelect {
	fjs.fns = append(fjs.fns, fns...)
	return fjs
}

// Scan applies the selector query and scans the result into the given value.
func (fjs *FailedJobSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fjs.ctx, "Select")
	if err := fjs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FailedJobQuery, *FailedJobSelect](ctx, fjs.FailedJobQuery, fjs, fjs.inters, v)
}

func (fjs *FailedJobSelect) sqlScan(ctx context.Context, root *FailedJobQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fjs.fns))
	for _, fn := range fjs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fjs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fjs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
