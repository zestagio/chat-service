// Code generated by ent, DO NOT EDIT.

package job

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/zestagio/chat-service/internal/store/predicate"
	"github.com/zestagio/chat-service/internal/types"
)

// ID filters vertices based on their ID field.
func ID(id types.JobID) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id types.JobID) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id types.JobID) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...types.JobID) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...types.JobID) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id types.JobID) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id types.JobID) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id types.JobID) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id types.JobID) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldName, v))
}

// Payload applies equality check predicate on the "payload" field. It's identical to PayloadEQ.
func Payload(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldPayload, v))
}

// Attempts applies equality check predicate on the "attempts" field. It's identical to AttemptsEQ.
func Attempts(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldAttempts, v))
}

// AvailableAt applies equality check predicate on the "available_at" field. It's identical to AvailableAtEQ.
func AvailableAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldAvailableAt, v))
}

// ReservedUntil applies equality check predicate on the "reserved_until" field. It's identical to ReservedUntilEQ.
func ReservedUntil(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldReservedUntil, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldName, v))
}

// PayloadEQ applies the EQ predicate on the "payload" field.
func PayloadEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldPayload, v))
}

// PayloadNEQ applies the NEQ predicate on the "payload" field.
func PayloadNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldPayload, v))
}

// PayloadIn applies the In predicate on the "payload" field.
func PayloadIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldPayload, vs...))
}

// PayloadNotIn applies the NotIn predicate on the "payload" field.
func PayloadNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldPayload, vs...))
}

// PayloadGT applies the GT predicate on the "payload" field.
func PayloadGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldPayload, v))
}

// PayloadGTE applies the GTE predicate on the "payload" field.
func PayloadGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldPayload, v))
}

// PayloadLT applies the LT predicate on the "payload" field.
func PayloadLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldPayload, v))
}

// PayloadLTE applies the LTE predicate on the "payload" field.
func PayloadLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldPayload, v))
}

// PayloadContains applies the Contains predicate on the "payload" field.
func PayloadContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldPayload, v))
}

// PayloadHasPrefix applies the HasPrefix predicate on the "payload" field.
func PayloadHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldPayload, v))
}

// PayloadHasSuffix applies the HasSuffix predicate on the "payload" field.
func PayloadHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldPayload, v))
}

// PayloadEqualFold applies the EqualFold predicate on the "payload" field.
func PayloadEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldPayload, v))
}

// PayloadContainsFold applies the ContainsFold predicate on the "payload" field.
func PayloadContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldPayload, v))
}

// AttemptsEQ applies the EQ predicate on the "attempts" field.
func AttemptsEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldAttempts, v))
}

// AttemptsNEQ applies the NEQ predicate on the "attempts" field.
func AttemptsNEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldAttempts, v))
}

// AttemptsIn applies the In predicate on the "attempts" field.
func AttemptsIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldAttempts, vs...))
}

// AttemptsNotIn applies the NotIn predicate on the "attempts" field.
func AttemptsNotIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldAttempts, vs...))
}

// AttemptsGT applies the GT predicate on the "attempts" field.
func AttemptsGT(v int) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldAttempts, v))
}

// AttemptsGTE applies the GTE predicate on the "attempts" field.
func AttemptsGTE(v int) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldAttempts, v))
}

// AttemptsLT applies the LT predicate on the "attempts" field.
func AttemptsLT(v int) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldAttempts, v))
}

// AttemptsLTE applies the LTE predicate on the "attempts" field.
func AttemptsLTE(v int) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldAttempts, v))
}

// AvailableAtEQ applies the EQ predicate on the "available_at" field.
func AvailableAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldAvailableAt, v))
}

// AvailableAtNEQ applies the NEQ predicate on the "available_at" field.
func AvailableAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldAvailableAt, v))
}

// AvailableAtIn applies the In predicate on the "available_at" field.
func AvailableAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldAvailableAt, vs...))
}

// AvailableAtNotIn applies the NotIn predicate on the "available_at" field.
func AvailableAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldAvailableAt, vs...))
}

// AvailableAtGT applies the GT predicate on the "available_at" field.
func AvailableAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldAvailableAt, v))
}

// AvailableAtGTE applies the GTE predicate on the "available_at" field.
func AvailableAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldAvailableAt, v))
}

// AvailableAtLT applies the LT predicate on the "available_at" field.
func AvailableAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldAvailableAt, v))
}

// AvailableAtLTE applies the LTE predicate on the "available_at" field.
func AvailableAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldAvailableAt, v))
}

// AvailableAtIsNil applies the IsNil predicate on the "available_at" field.
func AvailableAtIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldAvailableAt))
}

// AvailableAtNotNil applies the NotNil predicate on the "available_at" field.
func AvailableAtNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldAvailableAt))
}

// ReservedUntilEQ applies the EQ predicate on the "reserved_until" field.
func ReservedUntilEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldReservedUntil, v))
}

// ReservedUntilNEQ applies the NEQ predicate on the "reserved_until" field.
func ReservedUntilNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldReservedUntil, v))
}

// ReservedUntilIn applies the In predicate on the "reserved_until" field.
func ReservedUntilIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldReservedUntil, vs...))
}

// ReservedUntilNotIn applies the NotIn predicate on the "reserved_until" field.
func ReservedUntilNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldReservedUntil, vs...))
}

// ReservedUntilGT applies the GT predicate on the "reserved_until" field.
func ReservedUntilGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldReservedUntil, v))
}

// ReservedUntilGTE applies the GTE predicate on the "reserved_until" field.
func ReservedUntilGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldReservedUntil, v))
}

// ReservedUntilLT applies the LT predicate on the "reserved_until" field.
func ReservedUntilLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldReservedUntil, v))
}

// ReservedUntilLTE applies the LTE predicate on the "reserved_until" field.
func ReservedUntilLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldReservedUntil, v))
}

// ReservedUntilIsNil applies the IsNil predicate on the "reserved_until" field.
func ReservedUntilIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldReservedUntil))
}

// ReservedUntilNotNil applies the NotNil predicate on the "reserved_until" field.
func ReservedUntilNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldReservedUntil))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Job) predicate.Job {
	return predicate.Job(sql.NotPredicates(p))
}
