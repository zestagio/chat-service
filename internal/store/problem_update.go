// Code generated by ent, DO NOT EDIT.

package store

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/zestagio/chat-service/internal/store/message"
	"github.com/zestagio/chat-service/internal/store/predicate"
	"github.com/zestagio/chat-service/internal/store/problem"
	"github.com/zestagio/chat-service/internal/types"
)

// ProblemUpdate is the builder for updating Problem entities.
type ProblemUpdate struct {
	config
	hooks    []Hook
	mutation *ProblemMutation
}

// Where appends a list predicates to the ProblemUpdate builder.
func (pu *ProblemUpdate) Where(ps ...predicate.Problem) *ProblemUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetManagerID sets the "manager_id" field.
func (pu *ProblemUpdate) SetManagerID(ti types.UserID) *ProblemUpdate {
	pu.mutation.SetManagerID(ti)
	return pu
}

// SetNillableManagerID sets the "manager_id" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableManagerID(ti *types.UserID) *ProblemUpdate {
	if ti != nil {
		pu.SetManagerID(*ti)
	}
	return pu
}

// ClearManagerID clears the value of the "manager_id" field.
func (pu *ProblemUpdate) ClearManagerID() *ProblemUpdate {
	pu.mutation.ClearManagerID()
	return pu
}

// SetResolvedAt sets the "resolved_at" field.
func (pu *ProblemUpdate) SetResolvedAt(t time.Time) *ProblemUpdate {
	pu.mutation.SetResolvedAt(t)
	return pu
}

// SetNillableResolvedAt sets the "resolved_at" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableResolvedAt(t *time.Time) *ProblemUpdate {
	if t != nil {
		pu.SetResolvedAt(*t)
	}
	return pu
}

// ClearResolvedAt clears the value of the "resolved_at" field.
func (pu *ProblemUpdate) ClearResolvedAt() *ProblemUpdate {
	pu.mutation.ClearResolvedAt()
	return pu
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (pu *ProblemUpdate) AddMessageIDs(ids ...types.MessageID) *ProblemUpdate {
	pu.mutation.AddMessageIDs(ids...)
	return pu
}

// AddMessages adds the "messages" edges to the Message entity.
func (pu *ProblemUpdate) AddMessages(m ...*Message) *ProblemUpdate {
	ids := make([]types.MessageID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.AddMessageIDs(ids...)
}

// Mutation returns the ProblemMutation object of the builder.
func (pu *ProblemUpdate) Mutation() *ProblemMutation {
	return pu.mutation
}

// ClearMessages clears all "messages" edges to the Message entity.
func (pu *ProblemUpdate) ClearMessages() *ProblemUpdate {
	pu.mutation.ClearMessages()
	return pu
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (pu *ProblemUpdate) RemoveMessageIDs(ids ...types.MessageID) *ProblemUpdate {
	pu.mutation.RemoveMessageIDs(ids...)
	return pu
}

// RemoveMessages removes "messages" edges to Message entities.
func (pu *ProblemUpdate) RemoveMessages(m ...*Message) *ProblemUpdate {
	ids := make([]types.MessageID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.RemoveMessageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProblemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProblemUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProblemUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProblemUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProblemUpdate) check() error {
	if v, ok := pu.mutation.ManagerID(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "manager_id", err: fmt.Errorf(`store: validator failed for field "Problem.manager_id": %w`, err)}
		}
	}
	if _, ok := pu.mutation.ChatID(); pu.mutation.ChatCleared() && !ok {
		return errors.New(`store: clearing a required unique edge "Problem.chat"`)
	}
	return nil
}

func (pu *ProblemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(problem.Table, problem.Columns, sqlgraph.NewFieldSpec(problem.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.ManagerID(); ok {
		_spec.SetField(problem.FieldManagerID, field.TypeUUID, value)
	}
	if pu.mutation.ManagerIDCleared() {
		_spec.ClearField(problem.FieldManagerID, field.TypeUUID)
	}
	if value, ok := pu.mutation.ResolvedAt(); ok {
		_spec.SetField(problem.FieldResolvedAt, field.TypeTime, value)
	}
	if pu.mutation.ResolvedAtCleared() {
		_spec.ClearField(problem.FieldResolvedAt, field.TypeTime)
	}
	if pu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.MessagesTable,
			Columns: []string{problem.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !pu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.MessagesTable,
			Columns: []string{problem.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.MessagesTable,
			Columns: []string{problem.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{problem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProblemUpdateOne is the builder for updating a single Problem entity.
type ProblemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProblemMutation
}

// SetManagerID sets the "manager_id" field.
func (puo *ProblemUpdateOne) SetManagerID(ti types.UserID) *ProblemUpdateOne {
	puo.mutation.SetManagerID(ti)
	return puo
}

// SetNillableManagerID sets the "manager_id" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableManagerID(ti *types.UserID) *ProblemUpdateOne {
	if ti != nil {
		puo.SetManagerID(*ti)
	}
	return puo
}

// ClearManagerID clears the value of the "manager_id" field.
func (puo *ProblemUpdateOne) ClearManagerID() *ProblemUpdateOne {
	puo.mutation.ClearManagerID()
	return puo
}

// SetResolvedAt sets the "resolved_at" field.
func (puo *ProblemUpdateOne) SetResolvedAt(t time.Time) *ProblemUpdateOne {
	puo.mutation.SetResolvedAt(t)
	return puo
}

// SetNillableResolvedAt sets the "resolved_at" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableResolvedAt(t *time.Time) *ProblemUpdateOne {
	if t != nil {
		puo.SetResolvedAt(*t)
	}
	return puo
}

// ClearResolvedAt clears the value of the "resolved_at" field.
func (puo *ProblemUpdateOne) ClearResolvedAt() *ProblemUpdateOne {
	puo.mutation.ClearResolvedAt()
	return puo
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (puo *ProblemUpdateOne) AddMessageIDs(ids ...types.MessageID) *ProblemUpdateOne {
	puo.mutation.AddMessageIDs(ids...)
	return puo
}

// AddMessages adds the "messages" edges to the Message entity.
func (puo *ProblemUpdateOne) AddMessages(m ...*Message) *ProblemUpdateOne {
	ids := make([]types.MessageID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.AddMessageIDs(ids...)
}

// Mutation returns the ProblemMutation object of the builder.
func (puo *ProblemUpdateOne) Mutation() *ProblemMutation {
	return puo.mutation
}

// ClearMessages clears all "messages" edges to the Message entity.
func (puo *ProblemUpdateOne) ClearMessages() *ProblemUpdateOne {
	puo.mutation.ClearMessages()
	return puo
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (puo *ProblemUpdateOne) RemoveMessageIDs(ids ...types.MessageID) *ProblemUpdateOne {
	puo.mutation.RemoveMessageIDs(ids...)
	return puo
}

// RemoveMessages removes "messages" edges to Message entities.
func (puo *ProblemUpdateOne) RemoveMessages(m ...*Message) *ProblemUpdateOne {
	ids := make([]types.MessageID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.RemoveMessageIDs(ids...)
}

// Where appends a list predicates to the ProblemUpdate builder.
func (puo *ProblemUpdateOne) Where(ps ...predicate.Problem) *ProblemUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProblemUpdateOne) Select(field string, fields ...string) *ProblemUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Problem entity.
func (puo *ProblemUpdateOne) Save(ctx context.Context) (*Problem, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProblemUpdateOne) SaveX(ctx context.Context) *Problem {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProblemUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProblemUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProblemUpdateOne) check() error {
	if v, ok := puo.mutation.ManagerID(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "manager_id", err: fmt.Errorf(`store: validator failed for field "Problem.manager_id": %w`, err)}
		}
	}
	if _, ok := puo.mutation.ChatID(); puo.mutation.ChatCleared() && !ok {
		return errors.New(`store: clearing a required unique edge "Problem.chat"`)
	}
	return nil
}

func (puo *ProblemUpdateOne) sqlSave(ctx context.Context) (_node *Problem, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(problem.Table, problem.Columns, sqlgraph.NewFieldSpec(problem.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`store: missing "Problem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, problem.FieldID)
		for _, f := range fields {
			if !problem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("store: invalid field %q for query", f)}
			}
			if f != problem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.ManagerID(); ok {
		_spec.SetField(problem.FieldManagerID, field.TypeUUID, value)
	}
	if puo.mutation.ManagerIDCleared() {
		_spec.ClearField(problem.FieldManagerID, field.TypeUUID)
	}
	if value, ok := puo.mutation.ResolvedAt(); ok {
		_spec.SetField(problem.FieldResolvedAt, field.TypeTime, value)
	}
	if puo.mutation.ResolvedAtCleared() {
		_spec.ClearField(problem.FieldResolvedAt, field.TypeTime)
	}
	if puo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.MessagesTable,
			Columns: []string{problem.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !puo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.MessagesTable,
			Columns: []string{problem.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.MessagesTable,
			Columns: []string{problem.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Problem{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{problem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
