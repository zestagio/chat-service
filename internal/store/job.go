// Code generated by ent, DO NOT EDIT.

package store

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/zestagio/chat-service/internal/store/job"
	"github.com/zestagio/chat-service/internal/types"
)

// Job is the model entity for the Job schema.
type Job struct {
	config `json:"-"`
	// ID of the ent.
	ID types.JobID `json:"id,omitempty"`
	// Job name. Name determines handler.
	Name string `json:"name,omitempty"`
	// Required data to complete the job.
	Payload string `json:"payload,omitempty"`
	// The number of execution attempts.
	// If a certain threshold is exceeded, the task can be removed from the queue.
	Attempts int `json:"attempts,omitempty"`
	// The time when the job becomes available for execution. Useful for delayed execution.
	AvailableAt time.Time `json:"available_at,omitempty"`
	// Until this time the task is "reserved". Used to synchronize goroutines processing the queue.
	// When grabbing a task, the goroutine puts in reserved_until <time.Now() + some timeout>.
	// Until that time the task is considered "reserved", other goroutines will skip it.
	ReservedUntil time.Time `json:"reserved_until,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Job) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case job.FieldAttempts:
			values[i] = new(sql.NullInt64)
		case job.FieldName, job.FieldPayload:
			values[i] = new(sql.NullString)
		case job.FieldAvailableAt, job.FieldReservedUntil, job.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case job.FieldID:
			values[i] = new(types.JobID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Job fields.
func (j *Job) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case job.FieldID:
			if value, ok := values[i].(*types.JobID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				j.ID = *value
			}
		case job.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				j.Name = value.String
			}
		case job.FieldPayload:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payload", values[i])
			} else if value.Valid {
				j.Payload = value.String
			}
		case job.FieldAttempts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attempts", values[i])
			} else if value.Valid {
				j.Attempts = int(value.Int64)
			}
		case job.FieldAvailableAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field available_at", values[i])
			} else if value.Valid {
				j.AvailableAt = value.Time
			}
		case job.FieldReservedUntil:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field reserved_until", values[i])
			} else if value.Valid {
				j.ReservedUntil = value.Time
			}
		case job.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				j.CreatedAt = value.Time
			}
		default:
			j.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Job.
// This includes values selected through modifiers, order, etc.
func (j *Job) Value(name string) (ent.Value, error) {
	return j.selectValues.Get(name)
}

// Update returns a builder for updating this Job.
// Note that you need to call Job.Unwrap() before calling this method if this Job
// was returned from a transaction, and the transaction was committed or rolled back.
func (j *Job) Update() *JobUpdateOne {
	return NewJobClient(j.config).UpdateOne(j)
}

// Unwrap unwraps the Job entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (j *Job) Unwrap() *Job {
	_tx, ok := j.config.driver.(*txDriver)
	if !ok {
		panic("store: Job is not a transactional entity")
	}
	j.config.driver = _tx.drv
	return j
}

// String implements the fmt.Stringer.
func (j *Job) String() string {
	var builder strings.Builder
	builder.WriteString("Job(")
	builder.WriteString(fmt.Sprintf("id=%v, ", j.ID))
	builder.WriteString("name=")
	builder.WriteString(j.Name)
	builder.WriteString(", ")
	builder.WriteString("payload=")
	builder.WriteString(j.Payload)
	builder.WriteString(", ")
	builder.WriteString("attempts=")
	builder.WriteString(fmt.Sprintf("%v", j.Attempts))
	builder.WriteString(", ")
	builder.WriteString("available_at=")
	builder.WriteString(j.AvailableAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("reserved_until=")
	builder.WriteString(j.ReservedUntil.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(j.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Jobs is a parsable slice of Job.
type Jobs []*Job
