// Code generated by ent, DO NOT EDIT.

package store

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/zestagio/chat-service/internal/store/failedjob"
	"github.com/zestagio/chat-service/internal/store/predicate"
)

// FailedJobDelete is the builder for deleting a FailedJob entity.
type FailedJobDelete struct {
	config
	hooks    []Hook
	mutation *FailedJobMutation
}

// Where appends a list predicates to the FailedJobDelete builder.
func (fjd *FailedJobDelete) Where(ps ...predicate.FailedJob) *FailedJobDelete {
	fjd.mutation.Where(ps...)
	return fjd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fjd *FailedJobDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fjd.sqlExec, fjd.mutation, fjd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fjd *FailedJobDelete) ExecX(ctx context.Context) int {
	n, err := fjd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fjd *FailedJobDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(failedjob.Table, sqlgraph.NewFieldSpec(failedjob.FieldID, field.TypeUUID))
	if ps := fjd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fjd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fjd.mutation.done = true
	return affected, err
}

// FailedJobDeleteOne is the builder for deleting a single FailedJob entity.
type FailedJobDeleteOne struct {
	fjd *FailedJobDelete
}

// Where appends a list predicates to the FailedJobDelete builder.
func (fjdo *FailedJobDeleteOne) Where(ps ...predicate.FailedJob) *FailedJobDeleteOne {
	fjdo.fjd.mutation.Where(ps...)
	return fjdo
}

// Exec executes the deletion query.
func (fjdo *FailedJobDeleteOne) Exec(ctx context.Context) error {
	n, err := fjdo.fjd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{failedjob.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fjdo *FailedJobDeleteOne) ExecX(ctx context.Context) {
	if err := fjdo.Exec(ctx); err != nil {
		panic(err)
	}
}
