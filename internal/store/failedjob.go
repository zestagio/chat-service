// Code generated by ent, DO NOT EDIT.

package store

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/zestagio/chat-service/internal/store/failedjob"
	"github.com/zestagio/chat-service/internal/types"
)

// FailedJob is the model entity for the FailedJob schema.
type FailedJob struct {
	config `json:"-"`
	// ID of the ent.
	ID types.FailedJobID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Payload holds the value of the "payload" field.
	Payload string `json:"payload,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason string `json:"reason,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FailedJob) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case failedjob.FieldName, failedjob.FieldPayload, failedjob.FieldReason:
			values[i] = new(sql.NullString)
		case failedjob.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case failedjob.FieldID:
			values[i] = new(types.FailedJobID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FailedJob fields.
func (fj *FailedJob) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case failedjob.FieldID:
			if value, ok := values[i].(*types.FailedJobID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				fj.ID = *value
			}
		case failedjob.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				fj.Name = value.String
			}
		case failedjob.FieldPayload:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payload", values[i])
			} else if value.Valid {
				fj.Payload = value.String
			}
		case failedjob.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				fj.Reason = value.String
			}
		case failedjob.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fj.CreatedAt = value.Time
			}
		default:
			fj.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FailedJob.
// This includes values selected through modifiers, order, etc.
func (fj *FailedJob) Value(name string) (ent.Value, error) {
	return fj.selectValues.Get(name)
}

// Update returns a builder for updating this FailedJob.
// Note that you need to call FailedJob.Unwrap() before calling this method if this FailedJob
// was returned from a transaction, and the transaction was committed or rolled back.
func (fj *FailedJob) Update() *FailedJobUpdateOne {
	return NewFailedJobClient(fj.config).UpdateOne(fj)
}

// Unwrap unwraps the FailedJob entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fj *FailedJob) Unwrap() *FailedJob {
	_tx, ok := fj.config.driver.(*txDriver)
	if !ok {
		panic("store: FailedJob is not a transactional entity")
	}
	fj.config.driver = _tx.drv
	return fj
}

// String implements the fmt.Stringer.
func (fj *FailedJob) String() string {
	var builder strings.Builder
	builder.WriteString("FailedJob(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fj.ID))
	builder.WriteString("name=")
	builder.WriteString(fj.Name)
	builder.WriteString(", ")
	builder.WriteString("payload=")
	builder.WriteString(fj.Payload)
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(fj.Reason)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fj.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// FailedJobs is a parsable slice of FailedJob.
type FailedJobs []*FailedJob
