// Code generated by ent, DO NOT EDIT.

package store

import (
	"time"

	"github.com/zestagio/chat-service/internal/store/chat"
	"github.com/zestagio/chat-service/internal/store/failedjob"
	"github.com/zestagio/chat-service/internal/store/job"
	"github.com/zestagio/chat-service/internal/store/message"
	"github.com/zestagio/chat-service/internal/store/problem"
	"github.com/zestagio/chat-service/internal/store/schema"
	"github.com/zestagio/chat-service/internal/types"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	chatFields := schema.Chat{}.Fields()
	_ = chatFields
	// chatDescCreatedAt is the schema descriptor for created_at field.
	chatDescCreatedAt := chatFields[2].Descriptor()
	// chat.DefaultCreatedAt holds the default value on creation for the created_at field.
	chat.DefaultCreatedAt = chatDescCreatedAt.Default.(func() time.Time)
	// chatDescID is the schema descriptor for id field.
	chatDescID := chatFields[0].Descriptor()
	// chat.DefaultID holds the default value on creation for the id field.
	chat.DefaultID = chatDescID.Default.(func() types.ChatID)
	failedjobFields := schema.FailedJob{}.Fields()
	_ = failedjobFields
	// failedjobDescName is the schema descriptor for name field.
	failedjobDescName := failedjobFields[1].Descriptor()
	// failedjob.NameValidator is a validator for the "name" field. It is called by the builders before save.
	failedjob.NameValidator = failedjobDescName.Validators[0].(func(string) error)
	// failedjobDescPayload is the schema descriptor for payload field.
	failedjobDescPayload := failedjobFields[2].Descriptor()
	// failedjob.PayloadValidator is a validator for the "payload" field. It is called by the builders before save.
	failedjob.PayloadValidator = failedjobDescPayload.Validators[0].(func(string) error)
	// failedjobDescReason is the schema descriptor for reason field.
	failedjobDescReason := failedjobFields[3].Descriptor()
	// failedjob.ReasonValidator is a validator for the "reason" field. It is called by the builders before save.
	failedjob.ReasonValidator = failedjobDescReason.Validators[0].(func(string) error)
	// failedjobDescCreatedAt is the schema descriptor for created_at field.
	failedjobDescCreatedAt := failedjobFields[4].Descriptor()
	// failedjob.DefaultCreatedAt holds the default value on creation for the created_at field.
	failedjob.DefaultCreatedAt = failedjobDescCreatedAt.Default.(func() time.Time)
	// failedjobDescID is the schema descriptor for id field.
	failedjobDescID := failedjobFields[0].Descriptor()
	// failedjob.DefaultID holds the default value on creation for the id field.
	failedjob.DefaultID = failedjobDescID.Default.(func() types.FailedJobID)
	jobFields := schema.Job{}.Fields()
	_ = jobFields
	// jobDescName is the schema descriptor for name field.
	jobDescName := jobFields[1].Descriptor()
	// job.NameValidator is a validator for the "name" field. It is called by the builders before save.
	job.NameValidator = jobDescName.Validators[0].(func(string) error)
	// jobDescAttempts is the schema descriptor for attempts field.
	jobDescAttempts := jobFields[3].Descriptor()
	// job.DefaultAttempts holds the default value on creation for the attempts field.
	job.DefaultAttempts = jobDescAttempts.Default.(int)
	// job.AttemptsValidator is a validator for the "attempts" field. It is called by the builders before save.
	job.AttemptsValidator = func() func(int) error {
		validators := jobDescAttempts.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(attempts int) error {
			for _, fn := range fns {
				if err := fn(attempts); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// jobDescAvailableAt is the schema descriptor for available_at field.
	jobDescAvailableAt := jobFields[4].Descriptor()
	// job.DefaultAvailableAt holds the default value on creation for the available_at field.
	job.DefaultAvailableAt = jobDescAvailableAt.Default.(func() time.Time)
	// jobDescReservedUntil is the schema descriptor for reserved_until field.
	jobDescReservedUntil := jobFields[5].Descriptor()
	// job.DefaultReservedUntil holds the default value on creation for the reserved_until field.
	job.DefaultReservedUntil = jobDescReservedUntil.Default.(func() time.Time)
	// jobDescCreatedAt is the schema descriptor for created_at field.
	jobDescCreatedAt := jobFields[6].Descriptor()
	// job.DefaultCreatedAt holds the default value on creation for the created_at field.
	job.DefaultCreatedAt = jobDescCreatedAt.Default.(func() time.Time)
	// jobDescID is the schema descriptor for id field.
	jobDescID := jobFields[0].Descriptor()
	// job.DefaultID holds the default value on creation for the id field.
	job.DefaultID = jobDescID.Default.(func() types.JobID)
	messageFields := schema.Message{}.Fields()
	_ = messageFields
	// messageDescIsVisibleForClient is the schema descriptor for is_visible_for_client field.
	messageDescIsVisibleForClient := messageFields[4].Descriptor()
	// message.DefaultIsVisibleForClient holds the default value on creation for the is_visible_for_client field.
	message.DefaultIsVisibleForClient = messageDescIsVisibleForClient.Default.(bool)
	// messageDescIsVisibleForManager is the schema descriptor for is_visible_for_manager field.
	messageDescIsVisibleForManager := messageFields[5].Descriptor()
	// message.DefaultIsVisibleForManager holds the default value on creation for the is_visible_for_manager field.
	message.DefaultIsVisibleForManager = messageDescIsVisibleForManager.Default.(bool)
	// messageDescBody is the schema descriptor for body field.
	messageDescBody := messageFields[6].Descriptor()
	// message.BodyValidator is a validator for the "body" field. It is called by the builders before save.
	message.BodyValidator = func() func(string) error {
		validators := messageDescBody.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(body string) error {
			for _, fn := range fns {
				if err := fn(body); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// messageDescIsBlocked is the schema descriptor for is_blocked field.
	messageDescIsBlocked := messageFields[8].Descriptor()
	// message.DefaultIsBlocked holds the default value on creation for the is_blocked field.
	message.DefaultIsBlocked = messageDescIsBlocked.Default.(bool)
	// messageDescIsService is the schema descriptor for is_service field.
	messageDescIsService := messageFields[9].Descriptor()
	// message.DefaultIsService holds the default value on creation for the is_service field.
	message.DefaultIsService = messageDescIsService.Default.(bool)
	// messageDescCreatedAt is the schema descriptor for created_at field.
	messageDescCreatedAt := messageFields[11].Descriptor()
	// message.DefaultCreatedAt holds the default value on creation for the created_at field.
	message.DefaultCreatedAt = messageDescCreatedAt.Default.(func() time.Time)
	// messageDescID is the schema descriptor for id field.
	messageDescID := messageFields[0].Descriptor()
	// message.DefaultID holds the default value on creation for the id field.
	message.DefaultID = messageDescID.Default.(func() types.MessageID)
	problemFields := schema.Problem{}.Fields()
	_ = problemFields
	// problemDescCreatedAt is the schema descriptor for created_at field.
	problemDescCreatedAt := problemFields[5].Descriptor()
	// problem.DefaultCreatedAt holds the default value on creation for the created_at field.
	problem.DefaultCreatedAt = problemDescCreatedAt.Default.(func() time.Time)
	// problemDescID is the schema descriptor for id field.
	problemDescID := problemFields[0].Descriptor()
	// problem.DefaultID holds the default value on creation for the id field.
	problem.DefaultID = problemDescID.Default.(func() types.ProblemID)
}
