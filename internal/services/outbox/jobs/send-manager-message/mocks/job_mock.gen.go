// Code generated by MockGen. DO NOT EDIT.
// Source: job.go

// Package sendmanagermessagejobmocks is a generated GoMock package.
package sendmanagermessagejobmocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	chatsrepo "github.com/zestagio/chat-service/internal/repositories/chats"
	messagesrepo "github.com/zestagio/chat-service/internal/repositories/messages"
	eventstream "github.com/zestagio/chat-service/internal/services/event-stream"
	msgproducer "github.com/zestagio/chat-service/internal/services/msg-producer"
	types "github.com/zestagio/chat-service/internal/types"
)

// MockeventStream is a mock of eventStream interface.
type MockeventStream struct {
	ctrl     *gomock.Controller
	recorder *MockeventStreamMockRecorder
}

// MockeventStreamMockRecorder is the mock recorder for MockeventStream.
type MockeventStreamMockRecorder struct {
	mock *MockeventStream
}

// NewMockeventStream creates a new mock instance.
func NewMockeventStream(ctrl *gomock.Controller) *MockeventStream {
	mock := &MockeventStream{ctrl: ctrl}
	mock.recorder = &MockeventStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockeventStream) EXPECT() *MockeventStreamMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockeventStream) Publish(ctx context.Context, userID types.UserID, event eventstream.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, userID, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockeventStreamMockRecorder) Publish(ctx, userID, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockeventStream)(nil).Publish), ctx, userID, event)
}

// MockmessageProducer is a mock of messageProducer interface.
type MockmessageProducer struct {
	ctrl     *gomock.Controller
	recorder *MockmessageProducerMockRecorder
}

// MockmessageProducerMockRecorder is the mock recorder for MockmessageProducer.
type MockmessageProducerMockRecorder struct {
	mock *MockmessageProducer
}

// NewMockmessageProducer creates a new mock instance.
func NewMockmessageProducer(ctrl *gomock.Controller) *MockmessageProducer {
	mock := &MockmessageProducer{ctrl: ctrl}
	mock.recorder = &MockmessageProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessageProducer) EXPECT() *MockmessageProducerMockRecorder {
	return m.recorder
}

// ProduceMessage mocks base method.
func (m *MockmessageProducer) ProduceMessage(ctx context.Context, message msgproducer.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceMessage", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceMessage indicates an expected call of ProduceMessage.
func (mr *MockmessageProducerMockRecorder) ProduceMessage(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceMessage", reflect.TypeOf((*MockmessageProducer)(nil).ProduceMessage), ctx, message)
}

// MockmessageRepository is a mock of messageRepository interface.
type MockmessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockmessageRepositoryMockRecorder
}

// MockmessageRepositoryMockRecorder is the mock recorder for MockmessageRepository.
type MockmessageRepositoryMockRecorder struct {
	mock *MockmessageRepository
}

// NewMockmessageRepository creates a new mock instance.
func NewMockmessageRepository(ctrl *gomock.Controller) *MockmessageRepository {
	mock := &MockmessageRepository{ctrl: ctrl}
	mock.recorder = &MockmessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessageRepository) EXPECT() *MockmessageRepositoryMockRecorder {
	return m.recorder
}

// GetMessageByID mocks base method.
func (m *MockmessageRepository) GetMessageByID(ctx context.Context, msgID types.MessageID) (*messagesrepo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageByID", ctx, msgID)
	ret0, _ := ret[0].(*messagesrepo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageByID indicates an expected call of GetMessageByID.
func (mr *MockmessageRepositoryMockRecorder) GetMessageByID(ctx, msgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageByID", reflect.TypeOf((*MockmessageRepository)(nil).GetMessageByID), ctx, msgID)
}

// MockchatRepository is a mock of chatRepository interface.
type MockchatRepository struct {
	ctrl     *gomock.Controller
	recorder *MockchatRepositoryMockRecorder
}

// MockchatRepositoryMockRecorder is the mock recorder for MockchatRepository.
type MockchatRepositoryMockRecorder struct {
	mock *MockchatRepository
}

// NewMockchatRepository creates a new mock instance.
func NewMockchatRepository(ctrl *gomock.Controller) *MockchatRepository {
	mock := &MockchatRepository{ctrl: ctrl}
	mock.recorder = &MockchatRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockchatRepository) EXPECT() *MockchatRepositoryMockRecorder {
	return m.recorder
}

// GetChatByID mocks base method.
func (m *MockchatRepository) GetChatByID(ctx context.Context, chatID types.ChatID) (*chatsrepo.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatByID", ctx, chatID)
	ret0, _ := ret[0].(*chatsrepo.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatByID indicates an expected call of GetChatByID.
func (mr *MockchatRepositoryMockRecorder) GetChatByID(ctx, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatByID", reflect.TypeOf((*MockchatRepository)(nil).GetChatByID), ctx, chatID)
}
