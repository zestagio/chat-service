// Code generated by MockGen. DO NOT EDIT.
// Source: job.go

// Package closechatjobmocks is a generated GoMock package.
package closechatjobmocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	chatsrepo "github.com/zestagio/chat-service/internal/repositories/chats"
	messagesrepo "github.com/zestagio/chat-service/internal/repositories/messages"
	problemsrepo "github.com/zestagio/chat-service/internal/repositories/problems"
	eventstream "github.com/zestagio/chat-service/internal/services/event-stream"
	types "github.com/zestagio/chat-service/internal/types"
)

// MockeventStream is a mock of eventStream interface.
type MockeventStream struct {
	ctrl     *gomock.Controller
	recorder *MockeventStreamMockRecorder
}

// MockeventStreamMockRecorder is the mock recorder for MockeventStream.
type MockeventStreamMockRecorder struct {
	mock *MockeventStream
}

// NewMockeventStream creates a new mock instance.
func NewMockeventStream(ctrl *gomock.Controller) *MockeventStream {
	mock := &MockeventStream{ctrl: ctrl}
	mock.recorder = &MockeventStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockeventStream) EXPECT() *MockeventStreamMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockeventStream) Publish(ctx context.Context, userID types.UserID, event eventstream.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, userID, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockeventStreamMockRecorder) Publish(ctx, userID, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockeventStream)(nil).Publish), ctx, userID, event)
}

// MockchatsRepository is a mock of chatsRepository interface.
type MockchatsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockchatsRepositoryMockRecorder
}

// MockchatsRepositoryMockRecorder is the mock recorder for MockchatsRepository.
type MockchatsRepositoryMockRecorder struct {
	mock *MockchatsRepository
}

// NewMockchatsRepository creates a new mock instance.
func NewMockchatsRepository(ctrl *gomock.Controller) *MockchatsRepository {
	mock := &MockchatsRepository{ctrl: ctrl}
	mock.recorder = &MockchatsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockchatsRepository) EXPECT() *MockchatsRepositoryMockRecorder {
	return m.recorder
}

// GetChatByID mocks base method.
func (m *MockchatsRepository) GetChatByID(ctx context.Context, chatID types.ChatID) (*chatsrepo.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatByID", ctx, chatID)
	ret0, _ := ret[0].(*chatsrepo.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatByID indicates an expected call of GetChatByID.
func (mr *MockchatsRepositoryMockRecorder) GetChatByID(ctx, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatByID", reflect.TypeOf((*MockchatsRepository)(nil).GetChatByID), ctx, chatID)
}

// MockproblemRepository is a mock of problemRepository interface.
type MockproblemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockproblemRepositoryMockRecorder
}

// MockproblemRepositoryMockRecorder is the mock recorder for MockproblemRepository.
type MockproblemRepositoryMockRecorder struct {
	mock *MockproblemRepository
}

// NewMockproblemRepository creates a new mock instance.
func NewMockproblemRepository(ctrl *gomock.Controller) *MockproblemRepository {
	mock := &MockproblemRepository{ctrl: ctrl}
	mock.recorder = &MockproblemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproblemRepository) EXPECT() *MockproblemRepositoryMockRecorder {
	return m.recorder
}

// GetProblemByID mocks base method.
func (m *MockproblemRepository) GetProblemByID(ctx context.Context, problemID types.ProblemID) (*problemsrepo.Problem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblemByID", ctx, problemID)
	ret0, _ := ret[0].(*problemsrepo.Problem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblemByID indicates an expected call of GetProblemByID.
func (mr *MockproblemRepositoryMockRecorder) GetProblemByID(ctx, problemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblemByID", reflect.TypeOf((*MockproblemRepository)(nil).GetProblemByID), ctx, problemID)
}

// GetProblemRequestID mocks base method.
func (m *MockproblemRepository) GetProblemRequestID(ctx context.Context, problemID types.ProblemID) (types.RequestID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProblemRequestID", ctx, problemID)
	ret0, _ := ret[0].(types.RequestID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProblemRequestID indicates an expected call of GetProblemRequestID.
func (mr *MockproblemRepositoryMockRecorder) GetProblemRequestID(ctx, problemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProblemRequestID", reflect.TypeOf((*MockproblemRepository)(nil).GetProblemRequestID), ctx, problemID)
}

// MockmessageRepository is a mock of messageRepository interface.
type MockmessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockmessageRepositoryMockRecorder
}

// MockmessageRepositoryMockRecorder is the mock recorder for MockmessageRepository.
type MockmessageRepositoryMockRecorder struct {
	mock *MockmessageRepository
}

// NewMockmessageRepository creates a new mock instance.
func NewMockmessageRepository(ctrl *gomock.Controller) *MockmessageRepository {
	mock := &MockmessageRepository{ctrl: ctrl}
	mock.recorder = &MockmessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessageRepository) EXPECT() *MockmessageRepositoryMockRecorder {
	return m.recorder
}

// GetMessageByID mocks base method.
func (m *MockmessageRepository) GetMessageByID(ctx context.Context, msgID types.MessageID) (*messagesrepo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageByID", ctx, msgID)
	ret0, _ := ret[0].(*messagesrepo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageByID indicates an expected call of GetMessageByID.
func (mr *MockmessageRepositoryMockRecorder) GetMessageByID(ctx, msgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageByID", reflect.TypeOf((*MockmessageRepository)(nil).GetMessageByID), ctx, msgID)
}

// MockmanagerLoadService is a mock of managerLoadService interface.
type MockmanagerLoadService struct {
	ctrl     *gomock.Controller
	recorder *MockmanagerLoadServiceMockRecorder
}

// MockmanagerLoadServiceMockRecorder is the mock recorder for MockmanagerLoadService.
type MockmanagerLoadServiceMockRecorder struct {
	mock *MockmanagerLoadService
}

// NewMockmanagerLoadService creates a new mock instance.
func NewMockmanagerLoadService(ctrl *gomock.Controller) *MockmanagerLoadService {
	mock := &MockmanagerLoadService{ctrl: ctrl}
	mock.recorder = &MockmanagerLoadServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmanagerLoadService) EXPECT() *MockmanagerLoadServiceMockRecorder {
	return m.recorder
}

// CanManagerTakeProblem mocks base method.
func (m *MockmanagerLoadService) CanManagerTakeProblem(ctx context.Context, managerID types.UserID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanManagerTakeProblem", ctx, managerID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanManagerTakeProblem indicates an expected call of CanManagerTakeProblem.
func (mr *MockmanagerLoadServiceMockRecorder) CanManagerTakeProblem(ctx, managerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanManagerTakeProblem", reflect.TypeOf((*MockmanagerLoadService)(nil).CanManagerTakeProblem), ctx, managerID)
}
