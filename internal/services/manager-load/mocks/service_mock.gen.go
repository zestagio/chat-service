// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package managerloadmocks is a generated GoMock package.
package managerloadmocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/zestagio/chat-service/internal/types"
)

// MockproblemsRepository is a mock of problemsRepository interface.
type MockproblemsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockproblemsRepositoryMockRecorder
}

// MockproblemsRepositoryMockRecorder is the mock recorder for MockproblemsRepository.
type MockproblemsRepositoryMockRecorder struct {
	mock *MockproblemsRepository
}

// NewMockproblemsRepository creates a new mock instance.
func NewMockproblemsRepository(ctrl *gomock.Controller) *MockproblemsRepository {
	mock := &MockproblemsRepository{ctrl: ctrl}
	mock.recorder = &MockproblemsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproblemsRepository) EXPECT() *MockproblemsRepositoryMockRecorder {
	return m.recorder
}

// GetManagerOpenProblemsCount mocks base method.
func (m *MockproblemsRepository) GetManagerOpenProblemsCount(ctx context.Context, managerID types.UserID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagerOpenProblemsCount", ctx, managerID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManagerOpenProblemsCount indicates an expected call of GetManagerOpenProblemsCount.
func (mr *MockproblemsRepositoryMockRecorder) GetManagerOpenProblemsCount(ctx, managerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagerOpenProblemsCount", reflect.TypeOf((*MockproblemsRepository)(nil).GetManagerOpenProblemsCount), ctx, managerID)
}
