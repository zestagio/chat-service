// Package clientevents provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package clientevents

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	"github.com/zestagio/chat-service/internal/types"
)

// Defines values for EventType.
const (
	EventTypeMessageBlockedEvent EventType = "MessageBlockedEvent"
	EventTypeMessageSentEvent    EventType = "MessageSentEvent"
	EventTypeNewMessageEvent     EventType = "NewMessageEvent"
)

// CommonMessage defines model for CommonMessage.
type CommonMessage struct {
	EventID   types.EventID   `json:"eventId"`
	EventType EventType       `json:"eventType"`
	MessageID types.MessageID `json:"messageId"`
	RequestID types.RequestID `json:"requestId"`
}

// EventType defines model for EventType.
type EventType string

// Message defines model for Message.
type Message struct {
	union json.RawMessage
}

// MessageSentEvent defines model for MessageSentEvent.
type MessageSentEvent = CommonMessage

// NewMessageEvent defines model for NewMessageEvent.
type NewMessageEvent struct {
	AuthorID  *types.UserID   `json:"authorId,omitempty"`
	Body      string          `json:"body"`
	CreatedAt time.Time       `json:"createdAt"`
	EventID   types.EventID   `json:"eventId"`
	EventType EventType       `json:"eventType"`
	IsService bool            `json:"isService"`
	MessageID types.MessageID `json:"messageId"`
	RequestID types.RequestID `json:"requestId"`
}

// AsNewMessageEvent returns the union data inside the Message as a NewMessageEvent
func (t Message) AsNewMessageEvent() (NewMessageEvent, error) {
	var body NewMessageEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewMessageEvent overwrites any union data inside the Message as the provided NewMessageEvent
func (t *Message) FromNewMessageEvent(v NewMessageEvent) error {
	v.EventType = "NewMessageEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewMessageEvent performs a merge with any union data inside the Message, using the provided NewMessageEvent
func (t *Message) MergeNewMessageEvent(v NewMessageEvent) error {
	v.EventType = "NewMessageEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Message) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"eventType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Message) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "NewMessageEvent":
		return t.AsNewMessageEvent()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Message) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Message) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RVTW/bMAz9KwY3YBcnzrZL4Vu/MBTDWmDZTkUPis3Yam1RE+lkXeD/Pkh2EifzPlp0",
	"JwsU+cjH95RsIKPakkEjDOkGOCuxVuF4TnVN5hMyqwJ9wDqy6ERjuMYVGrnK/XFJrlYCKTSNziEGebQI",
	"KbA4bQqI4fukoIlRtQ9ehrKLbbRP9R+ejtxNdG3JSWivpIQUCi1ls5hmVCc/kEUVmpKsVDJhdCudYaKN",
	"oDOqSgIotG3czfoltNrAa4dLSOFVsmee9LSTy11iG0PdUX86x35nv2E5evsyPB1+a5CfocrnvnB84tHb",
	"l5i4H1k7zCG9HcgU7+w1lGFI8K6N4XIoK5qm9iDXuO43HK4h3soxRyNHobOKsgfMu+jd8YraXZ7HzzVn",
	"TtfaKCE3eA6P190KcWgdMnizhPT2z247HrW9a0emTTegquof4A4fbAA77vBcrPj49atGSnJPN9ppVzfu",
	"s6+M7n88iwXljx7iF3kzh0owP5UDGrkSnIiuEUYcoXneNRoALogqVAaO/byHH9b18+ztRot7zIL6HkCb",
	"JQVsLZW/PVPmIZo31u8hOi+VROeVRiNRUJQhhhU61mQghdXbYD6LRlkNKbyfzqYziMPugmwJS7PwhwID",
	"5xy9qa105VcSNYwcLclFBRp0SrQpouBsnkY3UqJba8ZIS5QTsnkjUwj9fCYZbwf4gDL3Tfwq2JLhzjDv",
	"ZjP/ycjI1ojWVjoLhck9+wG2fz9/+5Xe2dLv65DCzUcf9XHvB3QcnH6Yc4ErrMjWfoldFsTQuApSWHOa",
	"JBVlqiqJJT2ZncySNXtpfgYAAP//DIo62CkHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
