// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package canreceiveproblemsmocks is a generated GoMock package.
package canreceiveproblemsmocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/zestagio/chat-service/internal/types"
)

// MockmanagerLoadService is a mock of managerLoadService interface.
type MockmanagerLoadService struct {
	ctrl     *gomock.Controller
	recorder *MockmanagerLoadServiceMockRecorder
}

// MockmanagerLoadServiceMockRecorder is the mock recorder for MockmanagerLoadService.
type MockmanagerLoadServiceMockRecorder struct {
	mock *MockmanagerLoadService
}

// NewMockmanagerLoadService creates a new mock instance.
func NewMockmanagerLoadService(ctrl *gomock.Controller) *MockmanagerLoadService {
	mock := &MockmanagerLoadService{ctrl: ctrl}
	mock.recorder = &MockmanagerLoadServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmanagerLoadService) EXPECT() *MockmanagerLoadServiceMockRecorder {
	return m.recorder
}

// CanManagerTakeProblem mocks base method.
func (m *MockmanagerLoadService) CanManagerTakeProblem(ctx context.Context, managerID types.UserID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanManagerTakeProblem", ctx, managerID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanManagerTakeProblem indicates an expected call of CanManagerTakeProblem.
func (mr *MockmanagerLoadServiceMockRecorder) CanManagerTakeProblem(ctx, managerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanManagerTakeProblem", reflect.TypeOf((*MockmanagerLoadService)(nil).CanManagerTakeProblem), ctx, managerID)
}

// MockmanagerPool is a mock of managerPool interface.
type MockmanagerPool struct {
	ctrl     *gomock.Controller
	recorder *MockmanagerPoolMockRecorder
}

// MockmanagerPoolMockRecorder is the mock recorder for MockmanagerPool.
type MockmanagerPoolMockRecorder struct {
	mock *MockmanagerPool
}

// NewMockmanagerPool creates a new mock instance.
func NewMockmanagerPool(ctrl *gomock.Controller) *MockmanagerPool {
	mock := &MockmanagerPool{ctrl: ctrl}
	mock.recorder = &MockmanagerPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmanagerPool) EXPECT() *MockmanagerPoolMockRecorder {
	return m.recorder
}

// Contains mocks base method.
func (m *MockmanagerPool) Contains(ctx context.Context, managerID types.UserID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", ctx, managerID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Contains indicates an expected call of Contains.
func (mr *MockmanagerPoolMockRecorder) Contains(ctx, managerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockmanagerPool)(nil).Contains), ctx, managerID)
}
