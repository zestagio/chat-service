// Code generated by cmd/gen-types; DO NOT EDIT.
package types

import (
	"database/sql/driver"
	"errors"

	"github.com/google/uuid"
)

type EventID uuid.UUID

var EventIDNil EventID

func NewEventID() EventID {
	return EventID(uuid.New())
}

func (id EventID) String() string {
	return (uuid.UUID)(id).String()
}

func (id *EventID) Scan(src interface{}) error {
	return (*uuid.UUID)(id).Scan(src)
}

func (id EventID) Value() (driver.Value, error) {
	return (uuid.UUID)(id).Value()
}

func (id EventID) MarshalText() ([]byte, error) {
	return (uuid.UUID)(id).MarshalText()
}

func (id *EventID) UnmarshalText(data []byte) error {
	return (*uuid.UUID)(id).UnmarshalText(data)
}

func (id EventID) IsZero() bool {
	return id.String() == uuid.Nil.String()
}

func (id EventID) Matches(x interface{}) bool {
	switch x := x.(type) {
	case EventID:
		return id.String() == x.String()
	}
	return false
}

func (id EventID) Validate() error {
	if id.IsZero() {
		return errors.New("zero EventID")
	}
	return nil
}

func (id EventID) AsPointer() *EventID {
	if id.IsZero() {
		return nil
	}
	return &id
}

type ChatID uuid.UUID

var ChatIDNil ChatID

func NewChatID() ChatID {
	return ChatID(uuid.New())
}

func (id ChatID) String() string {
	return (uuid.UUID)(id).String()
}

func (id *ChatID) Scan(src interface{}) error {
	return (*uuid.UUID)(id).Scan(src)
}

func (id ChatID) Value() (driver.Value, error) {
	return (uuid.UUID)(id).Value()
}

func (id ChatID) MarshalText() ([]byte, error) {
	return (uuid.UUID)(id).MarshalText()
}

func (id *ChatID) UnmarshalText(data []byte) error {
	return (*uuid.UUID)(id).UnmarshalText(data)
}

func (id ChatID) IsZero() bool {
	return id.String() == uuid.Nil.String()
}

func (id ChatID) Matches(x interface{}) bool {
	switch x := x.(type) {
	case ChatID:
		return id.String() == x.String()
	}
	return false
}

func (id ChatID) Validate() error {
	if id.IsZero() {
		return errors.New("zero ChatID")
	}
	return nil
}

func (id ChatID) AsPointer() *ChatID {
	if id.IsZero() {
		return nil
	}
	return &id
}

type FailedJobID uuid.UUID

var FailedJobIDNil FailedJobID

func NewFailedJobID() FailedJobID {
	return FailedJobID(uuid.New())
}

func (id FailedJobID) String() string {
	return (uuid.UUID)(id).String()
}

func (id *FailedJobID) Scan(src interface{}) error {
	return (*uuid.UUID)(id).Scan(src)
}

func (id FailedJobID) Value() (driver.Value, error) {
	return (uuid.UUID)(id).Value()
}

func (id FailedJobID) MarshalText() ([]byte, error) {
	return (uuid.UUID)(id).MarshalText()
}

func (id *FailedJobID) UnmarshalText(data []byte) error {
	return (*uuid.UUID)(id).UnmarshalText(data)
}

func (id FailedJobID) IsZero() bool {
	return id.String() == uuid.Nil.String()
}

func (id FailedJobID) Matches(x interface{}) bool {
	switch x := x.(type) {
	case FailedJobID:
		return id.String() == x.String()
	}
	return false
}

func (id FailedJobID) Validate() error {
	if id.IsZero() {
		return errors.New("zero FailedJobID")
	}
	return nil
}

func (id FailedJobID) AsPointer() *FailedJobID {
	if id.IsZero() {
		return nil
	}
	return &id
}

type JobID uuid.UUID

var JobIDNil JobID

func NewJobID() JobID {
	return JobID(uuid.New())
}

func (id JobID) String() string {
	return (uuid.UUID)(id).String()
}

func (id *JobID) Scan(src interface{}) error {
	return (*uuid.UUID)(id).Scan(src)
}

func (id JobID) Value() (driver.Value, error) {
	return (uuid.UUID)(id).Value()
}

func (id JobID) MarshalText() ([]byte, error) {
	return (uuid.UUID)(id).MarshalText()
}

func (id *JobID) UnmarshalText(data []byte) error {
	return (*uuid.UUID)(id).UnmarshalText(data)
}

func (id JobID) IsZero() bool {
	return id.String() == uuid.Nil.String()
}

func (id JobID) Matches(x interface{}) bool {
	switch x := x.(type) {
	case JobID:
		return id.String() == x.String()
	}
	return false
}

func (id JobID) Validate() error {
	if id.IsZero() {
		return errors.New("zero JobID")
	}
	return nil
}

func (id JobID) AsPointer() *JobID {
	if id.IsZero() {
		return nil
	}
	return &id
}

type MessageID uuid.UUID

var MessageIDNil MessageID

func NewMessageID() MessageID {
	return MessageID(uuid.New())
}

func (id MessageID) String() string {
	return (uuid.UUID)(id).String()
}

func (id *MessageID) Scan(src interface{}) error {
	return (*uuid.UUID)(id).Scan(src)
}

func (id MessageID) Value() (driver.Value, error) {
	return (uuid.UUID)(id).Value()
}

func (id MessageID) MarshalText() ([]byte, error) {
	return (uuid.UUID)(id).MarshalText()
}

func (id *MessageID) UnmarshalText(data []byte) error {
	return (*uuid.UUID)(id).UnmarshalText(data)
}

func (id MessageID) IsZero() bool {
	return id.String() == uuid.Nil.String()
}

func (id MessageID) Matches(x interface{}) bool {
	switch x := x.(type) {
	case MessageID:
		return id.String() == x.String()
	}
	return false
}

func (id MessageID) Validate() error {
	if id.IsZero() {
		return errors.New("zero MessageID")
	}
	return nil
}

func (id MessageID) AsPointer() *MessageID {
	if id.IsZero() {
		return nil
	}
	return &id
}

type ProblemID uuid.UUID

var ProblemIDNil ProblemID

func NewProblemID() ProblemID {
	return ProblemID(uuid.New())
}

func (id ProblemID) String() string {
	return (uuid.UUID)(id).String()
}

func (id *ProblemID) Scan(src interface{}) error {
	return (*uuid.UUID)(id).Scan(src)
}

func (id ProblemID) Value() (driver.Value, error) {
	return (uuid.UUID)(id).Value()
}

func (id ProblemID) MarshalText() ([]byte, error) {
	return (uuid.UUID)(id).MarshalText()
}

func (id *ProblemID) UnmarshalText(data []byte) error {
	return (*uuid.UUID)(id).UnmarshalText(data)
}

func (id ProblemID) IsZero() bool {
	return id.String() == uuid.Nil.String()
}

func (id ProblemID) Matches(x interface{}) bool {
	switch x := x.(type) {
	case ProblemID:
		return id.String() == x.String()
	}
	return false
}

func (id ProblemID) Validate() error {
	if id.IsZero() {
		return errors.New("zero ProblemID")
	}
	return nil
}

func (id ProblemID) AsPointer() *ProblemID {
	if id.IsZero() {
		return nil
	}
	return &id
}

type RequestID uuid.UUID

var RequestIDNil RequestID

func NewRequestID() RequestID {
	return RequestID(uuid.New())
}

func (id RequestID) String() string {
	return (uuid.UUID)(id).String()
}

func (id *RequestID) Scan(src interface{}) error {
	return (*uuid.UUID)(id).Scan(src)
}

func (id RequestID) Value() (driver.Value, error) {
	return (uuid.UUID)(id).Value()
}

func (id RequestID) MarshalText() ([]byte, error) {
	return (uuid.UUID)(id).MarshalText()
}

func (id *RequestID) UnmarshalText(data []byte) error {
	return (*uuid.UUID)(id).UnmarshalText(data)
}

func (id RequestID) IsZero() bool {
	return id.String() == uuid.Nil.String()
}

func (id RequestID) Matches(x interface{}) bool {
	switch x := x.(type) {
	case RequestID:
		return id.String() == x.String()
	}
	return false
}

func (id RequestID) Validate() error {
	if id.IsZero() {
		return errors.New("zero RequestID")
	}
	return nil
}

func (id RequestID) AsPointer() *RequestID {
	if id.IsZero() {
		return nil
	}
	return &id
}

type UserID uuid.UUID

var UserIDNil UserID

func NewUserID() UserID {
	return UserID(uuid.New())
}

func (id UserID) String() string {
	return (uuid.UUID)(id).String()
}

func (id *UserID) Scan(src interface{}) error {
	return (*uuid.UUID)(id).Scan(src)
}

func (id UserID) Value() (driver.Value, error) {
	return (uuid.UUID)(id).Value()
}

func (id UserID) MarshalText() ([]byte, error) {
	return (uuid.UUID)(id).MarshalText()
}

func (id *UserID) UnmarshalText(data []byte) error {
	return (*uuid.UUID)(id).UnmarshalText(data)
}

func (id UserID) IsZero() bool {
	return id.String() == uuid.Nil.String()
}

func (id UserID) Matches(x interface{}) bool {
	switch x := x.(type) {
	case UserID:
		return id.String() == x.String()
	}
	return false
}

func (id UserID) Validate() error {
	if id.IsZero() {
		return errors.New("zero UserID")
	}
	return nil
}

func (id UserID) AsPointer() *UserID {
	if id.IsZero() {
		return nil
	}
	return &id
}

type TypeSet = interface {
	EventID | ChatID | FailedJobID | JobID | MessageID | ProblemID | RequestID | UserID
}

func Parse[T TypeSet](s string) (T, error) {
	id, err := uuid.Parse(s)

	return T(id), err
}

func MustParse[T TypeSet](s string) T {
	return T(uuid.MustParse(s))
}
